"use strict";(()=>{var e={};e.id=277,e.ids=[277],e.modules={399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},6477:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>h,patchFetch:()=>y,requestAsyncStorage:()=>u,routeModule:()=>g,serverHooks:()=>m,staticGenerationAsyncStorage:()=>d});var a={};t.r(a),t.d(a,{POST:()=>p});var o=t(3278),n=t(5002),s=t(4877),i=t(1309),c=t(3965);let l=async(e,r)=>{try{let t=`You are an expert image analyzer for real estate and property documentation.
Your task is to analyze the provided image and generate 3-7 relevant, specific tags that accurately describe 
the key elements in the image. Tags should be concise (1-3 words), descriptive, and relevant for 
organizing images in a real estate or property context.

Tags should ONLY include the most important visual elements and characteristics. 
Do not include generic tags like "photo" or "image".

${r?.headingContext?`The image is being used in a section about: ${r.headingContext}`:""}
${r?.documentType?`This is for a ${r.documentType} document.`:""}`,a=`Analyze this image and generate 3-7 relevant tags that describe what's in the image.
Return ONLY a JSON array of strings with no explanation or additional text.
Example response format: ["exterior view", "brick facade", "landscaping", "good condition"]`,o=await (0,c._j)(t,a,e);try{let e=JSON.parse(o);if(Array.isArray(e)&&e.every(e=>"string"==typeof e))return{tags:e};throw Error("Invalid response format")}catch(r){let e=o.match(/\[([\s\S]*?)\]/);if(e)try{return{tags:JSON.parse(e[0])}}catch(e){throw Error("Could not parse tags from response")}else{let e=o.split(/[\n,]/).map(e=>{let r=e.match(/"([^"]+)"|'([^']+)'|([a-zA-Z\s-]+)/);return r?(r[1]||r[2]||r[3]).trim():null}).filter(e=>!!e&&e.length>0&&!e.includes(":"));if(e.length>0)return{tags:e};throw Error("Could not extract tags from response")}}}catch(e){return console.error("Error generating image tags:",e),{tags:[],error:e instanceof Error?e.message:"Unknown error generating tags"}}};async function p(e){try{let{imageData:r,headingContext:t,documentType:a}=await e.json();if(!r)return i.NextResponse.json({error:"Missing image data"},{status:400});let o=await l(r,{headingContext:t,documentType:a});if(o.error)return console.error("Error generating tags:",o.error),i.NextResponse.json({tags:["property","building","real estate"],error:o.error});return i.NextResponse.json({tags:o.tags})}catch(e){return console.error("Error processing image tagging request:",e),i.NextResponse.json({error:"Internal server error",tags:[]},{status:500})}}let g=new o.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/image-description/route",pathname:"/api/image-description",filename:"route",bundlePath:"app/api/image-description/route"},resolvedPagePath:"/Users/shansrikanthan/Documents/GitHub/hubv1/app/api/image-description/route.ts",nextConfigOutput:"",userland:a}),{requestAsyncStorage:u,staticGenerationAsyncStorage:d,serverHooks:m}=g,h="/api/image-description/route";function y(){return(0,s.patchFetch)({serverHooks:m,staticGenerationAsyncStorage:d})}},3965:(e,r,t)=>{t.d(r,{Xh:()=>n,_j:()=>i});let a="https://api.openai.com/v1/chat/completions",o=process.env.OPENAI_API_KEY,n=async(e,r)=>{try{if(!o)throw Error("OpenAI API key not configured");let t=await fetch(a,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${o}`},body:JSON.stringify({model:"gpt-4-turbo",messages:[{role:"system",content:e},{role:"user",content:r}],max_tokens:1e3,temperature:.7})});if(!t.ok){let e=await t.text();throw Error(`OpenAI API error: ${t.status} ${e}`)}let n=await t.json();return n.choices[0]?.message?.content||""}catch(e){throw console.error("Error calling OpenAI API:",e),e}},s=e=>{if(!e)return null;try{let r;if(e.startsWith("data:image")){let t=e.match(/^data:image\/([a-zA-Z]+);base64,(.+)$/);if(t&&t.length>=3)r=t[2].trim();else throw Error("Invalid data URL format")}else r=e.trim().replace(/\s/g,"");if(!r||0===r.length)throw Error("Empty base64 data");return{type:"image_url",image_url:{url:`data:image/jpeg;base64,${r}`,detail:"low"}}}catch(e){return console.error("Error processing image for OpenAI:",e),null}},i=async(e,r,t)=>{try{if(!o)throw Error("OpenAI API key not configured");let n=s(t);if(!n)throw Error("Failed to process image data");let i=await fetch(a,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${o}`},body:JSON.stringify({model:"gpt-4o",messages:[{role:"system",content:e},{role:"user",content:[{type:"text",text:r},n]}],max_tokens:1e3,temperature:.7})});if(!i.ok){let e=await i.text();throw Error(`OpenAI Vision API error: ${i.status} ${e}`)}let c=await i.json();return c.choices[0]?.message?.content||""}catch(e){throw console.error("Error calling OpenAI Vision API:",e),e}}}};var r=require("../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),a=r.X(0,[379,833],()=>t(6477));module.exports=a})();