"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/image-description/route";
exports.ids = ["app/api/image-description/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fimage-description%2Froute&page=%2Fapi%2Fimage-description%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fimage-description%2Froute.ts&appDir=%2FUsers%2Fshansrikanthan%2FDocuments%2FGitHub%2Fhubv1%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fshansrikanthan%2FDocuments%2FGitHub%2Fhubv1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fimage-description%2Froute&page=%2Fapi%2Fimage-description%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fimage-description%2Froute.ts&appDir=%2FUsers%2Fshansrikanthan%2FDocuments%2FGitHub%2Fhubv1%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fshansrikanthan%2FDocuments%2FGitHub%2Fhubv1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_shansrikanthan_Documents_GitHub_hubv1_app_api_image_description_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/image-description/route.ts */ \"(rsc)/./app/api/image-description/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/image-description/route\",\n        pathname: \"/api/image-description\",\n        filename: \"route\",\n        bundlePath: \"app/api/image-description/route\"\n    },\n    resolvedPagePath: \"/Users/shansrikanthan/Documents/GitHub/hubv1/app/api/image-description/route.ts\",\n    nextConfigOutput,\n    userland: _Users_shansrikanthan_Documents_GitHub_hubv1_app_api_image_description_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/image-description/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZpbWFnZS1kZXNjcmlwdGlvbiUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGaW1hZ2UtZGVzY3JpcHRpb24lMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZpbWFnZS1kZXNjcmlwdGlvbiUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnNoYW5zcmlrYW50aGFuJTJGRG9jdW1lbnRzJTJGR2l0SHViJTJGaHVidjElMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGc2hhbnNyaWthbnRoYW4lMkZEb2N1bWVudHMlMkZHaXRIdWIlMkZodWJ2MSZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDK0I7QUFDNUc7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9odWJ2MS8/ZmNiYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvc2hhbnNyaWthbnRoYW4vRG9jdW1lbnRzL0dpdEh1Yi9odWJ2MS9hcHAvYXBpL2ltYWdlLWRlc2NyaXB0aW9uL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9pbWFnZS1kZXNjcmlwdGlvbi9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2ltYWdlLWRlc2NyaXB0aW9uXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9pbWFnZS1kZXNjcmlwdGlvbi9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9zaGFuc3Jpa2FudGhhbi9Eb2N1bWVudHMvR2l0SHViL2h1YnYxL2FwcC9hcGkvaW1hZ2UtZGVzY3JpcHRpb24vcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2ltYWdlLWRlc2NyaXB0aW9uL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fimage-description%2Froute&page=%2Fapi%2Fimage-description%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fimage-description%2Froute.ts&appDir=%2FUsers%2Fshansrikanthan%2FDocuments%2FGitHub%2Fhubv1%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fshansrikanthan%2FDocuments%2FGitHub%2Fhubv1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/image-description/route.ts":
/*!********************************************!*\
  !*** ./app/api/image-description/route.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _services_ai_image_tagging_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/services/ai/image-tagging-service */ \"(rsc)/./services/ai/image-tagging-service.ts\");\n\n\nasync function POST(request) {\n    try {\n        // Parse request - should contain imageData (base64 or URL) and optional context\n        const { imageData, headingContext, documentType } = await request.json();\n        if (!imageData) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Missing image data\"\n            }, {\n                status: 400\n            });\n        }\n        // Call the image tagging service\n        const result = await (0,_services_ai_image_tagging_service__WEBPACK_IMPORTED_MODULE_1__.generateImageTags)(imageData, {\n            headingContext,\n            documentType\n        });\n        // Handle errors from the tagging service\n        if (result.error) {\n            console.error(\"Error generating tags:\", result.error);\n            // Fall back to default tags if there's an error\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                tags: [\n                    \"property\",\n                    \"building\",\n                    \"real estate\"\n                ],\n                error: result.error\n            });\n        }\n        // Return the generated tags\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            tags: result.tags\n        });\n    } catch (error) {\n        console.error(\"Error processing image tagging request:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Internal server error\",\n            tags: []\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2ltYWdlLWRlc2NyaXB0aW9uL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF3RDtBQUNnQjtBQUVqRSxlQUFlRSxLQUFLQyxPQUFvQjtJQUM3QyxJQUFJO1FBQ0YsZ0ZBQWdGO1FBQ2hGLE1BQU0sRUFDSkMsU0FBUyxFQUNUQyxjQUFjLEVBQ2RDLFlBQVksRUFDYixHQUFHLE1BQU1ILFFBQVFJLElBQUk7UUFFdEIsSUFBSSxDQUFDSCxXQUFXO1lBQ2QsT0FBT0oscURBQVlBLENBQUNPLElBQUksQ0FDdEI7Z0JBQUVDLE9BQU87WUFBcUIsR0FDOUI7Z0JBQUVDLFFBQVE7WUFBSTtRQUVsQjtRQUVBLGlDQUFpQztRQUNqQyxNQUFNQyxTQUFTLE1BQU1ULHFGQUFpQkEsQ0FBQ0csV0FBVztZQUNoREM7WUFDQUM7UUFDRjtRQUVBLHlDQUF5QztRQUN6QyxJQUFJSSxPQUFPRixLQUFLLEVBQUU7WUFDaEJHLFFBQVFILEtBQUssQ0FBQywwQkFBMEJFLE9BQU9GLEtBQUs7WUFFcEQsZ0RBQWdEO1lBQ2hELE9BQU9SLHFEQUFZQSxDQUFDTyxJQUFJLENBQUM7Z0JBQ3ZCSyxNQUFNO29CQUFDO29CQUFZO29CQUFZO2lCQUFjO2dCQUM3Q0osT0FBT0UsT0FBT0YsS0FBSztZQUNyQjtRQUNGO1FBRUEsNEJBQTRCO1FBQzVCLE9BQU9SLHFEQUFZQSxDQUFDTyxJQUFJLENBQUM7WUFBRUssTUFBTUYsT0FBT0UsSUFBSTtRQUFDO0lBQy9DLEVBQUUsT0FBT0osT0FBTztRQUNkRyxRQUFRSCxLQUFLLENBQUMsMkNBQTJDQTtRQUN6RCxPQUFPUixxREFBWUEsQ0FBQ08sSUFBSSxDQUN0QjtZQUFFQyxPQUFPO1lBQXlCSSxNQUFNLEVBQUU7UUFBQyxHQUMzQztZQUFFSCxRQUFRO1FBQUk7SUFFbEI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2h1YnYxLy4vYXBwL2FwaS9pbWFnZS1kZXNjcmlwdGlvbi9yb3V0ZS50cz81NTNjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyBnZW5lcmF0ZUltYWdlVGFncyB9IGZyb20gJ0Avc2VydmljZXMvYWkvaW1hZ2UtdGFnZ2luZy1zZXJ2aWNlJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICAvLyBQYXJzZSByZXF1ZXN0IC0gc2hvdWxkIGNvbnRhaW4gaW1hZ2VEYXRhIChiYXNlNjQgb3IgVVJMKSBhbmQgb3B0aW9uYWwgY29udGV4dFxuICAgIGNvbnN0IHsgXG4gICAgICBpbWFnZURhdGEsIFxuICAgICAgaGVhZGluZ0NvbnRleHQsIFxuICAgICAgZG9jdW1lbnRUeXBlIFxuICAgIH0gPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcblxuICAgIGlmICghaW1hZ2VEYXRhKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6ICdNaXNzaW5nIGltYWdlIGRhdGEnIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBDYWxsIHRoZSBpbWFnZSB0YWdnaW5nIHNlcnZpY2VcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnZW5lcmF0ZUltYWdlVGFncyhpbWFnZURhdGEsIHtcbiAgICAgIGhlYWRpbmdDb250ZXh0LFxuICAgICAgZG9jdW1lbnRUeXBlXG4gICAgfSk7XG5cbiAgICAvLyBIYW5kbGUgZXJyb3JzIGZyb20gdGhlIHRhZ2dpbmcgc2VydmljZVxuICAgIGlmIChyZXN1bHQuZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdlbmVyYXRpbmcgdGFnczonLCByZXN1bHQuZXJyb3IpO1xuICAgICAgXG4gICAgICAvLyBGYWxsIGJhY2sgdG8gZGVmYXVsdCB0YWdzIGlmIHRoZXJlJ3MgYW4gZXJyb3JcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IFxuICAgICAgICB0YWdzOiBbJ3Byb3BlcnR5JywgJ2J1aWxkaW5nJywgJ3JlYWwgZXN0YXRlJ10sXG4gICAgICAgIGVycm9yOiByZXN1bHQuZXJyb3JcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFJldHVybiB0aGUgZ2VuZXJhdGVkIHRhZ3NcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyB0YWdzOiByZXN1bHQudGFncyB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBwcm9jZXNzaW5nIGltYWdlIHRhZ2dpbmcgcmVxdWVzdDonLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicsIHRhZ3M6IFtdIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59Il0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsImdlbmVyYXRlSW1hZ2VUYWdzIiwiUE9TVCIsInJlcXVlc3QiLCJpbWFnZURhdGEiLCJoZWFkaW5nQ29udGV4dCIsImRvY3VtZW50VHlwZSIsImpzb24iLCJlcnJvciIsInN0YXR1cyIsInJlc3VsdCIsImNvbnNvbGUiLCJ0YWdzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./app/api/image-description/route.ts\n");

/***/ }),

/***/ "(rsc)/./services/ai/image-tagging-service.ts":
/*!**********************************************!*\
  !*** ./services/ai/image-tagging-service.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateImageTags: () => (/* binding */ generateImageTags)\n/* harmony export */ });\n/* harmony import */ var _openai_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./openai-service */ \"(rsc)/./services/ai/openai-service.ts\");\n/**\n * Image Tagging Service - Uses AI to generate relevant tags for photos\n */ \n/**\n * Generate AI tags for an image\n * @param imageData The image data (base64 string or data URL)\n * @param contextInfo Optional context information to help generate more relevant tags\n * @returns Array of relevant tags\n */ const generateImageTags = async (imageData, contextInfo)=>{\n    try {\n        // Create system prompt\n        const systemPrompt = `You are an expert image analyzer for real estate and property documentation.\nYour task is to analyze the provided image and generate 3-7 relevant, specific tags that accurately describe \nthe key elements in the image. Tags should be concise (1-3 words), descriptive, and relevant for \norganizing images in a real estate or property context.\n\nTags should ONLY include the most important visual elements and characteristics. \nDo not include generic tags like \"photo\" or \"image\".\n\n${contextInfo?.headingContext ? `The image is being used in a section about: ${contextInfo.headingContext}` : \"\"}\n${contextInfo?.documentType ? `This is for a ${contextInfo.documentType} document.` : \"\"}`;\n        // Create user prompt\n        const userPrompt = `Analyze this image and generate 3-7 relevant tags that describe what's in the image.\nReturn ONLY a JSON array of strings with no explanation or additional text.\nExample response format: [\"exterior view\", \"brick facade\", \"landscaping\", \"good condition\"]`;\n        // Call the Vision API\n        const response = await (0,_openai_service__WEBPACK_IMPORTED_MODULE_0__.callOpenAIVisionAPI)(systemPrompt, userPrompt, imageData);\n        // Parse the JSON response to extract the tags\n        try {\n            // Try to parse as JSON directly\n            const tags = JSON.parse(response);\n            // Validate that we got an array of strings\n            if (Array.isArray(tags) && tags.every((tag)=>typeof tag === \"string\")) {\n                return {\n                    tags\n                };\n            } else {\n                throw new Error(\"Invalid response format\");\n            }\n        } catch (parseError) {\n            // If direct parsing fails, try to extract JSON from text\n            // Using a regex that works with older JS versions (without the 's' flag)\n            const jsonMatch = response.match(/\\[([\\s\\S]*?)\\]/);\n            if (jsonMatch) {\n                try {\n                    const tags = JSON.parse(jsonMatch[0]);\n                    return {\n                        tags\n                    };\n                } catch (nestedError) {\n                    throw new Error(\"Could not parse tags from response\");\n                }\n            } else {\n                // If there's no valid JSON, manually extract tags\n                const tags = response.split(/[\\n,]/).map((line)=>{\n                    // Extract anything that looks like a tag (quotes or not)\n                    const match = line.match(/\"([^\"]+)\"|'([^']+)'|([a-zA-Z\\s-]+)/);\n                    return match ? (match[1] || match[2] || match[3]).trim() : null;\n                }).filter((tag)=>!!tag && tag.length > 0 && !tag.includes(\":\"));\n                if (tags.length > 0) {\n                    return {\n                        tags\n                    };\n                } else {\n                    throw new Error(\"Could not extract tags from response\");\n                }\n            }\n        }\n    } catch (error) {\n        console.error(\"Error generating image tags:\", error);\n        return {\n            tags: [],\n            error: error instanceof Error ? error.message : \"Unknown error generating tags\"\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zZXJ2aWNlcy9haS9pbWFnZS10YWdnaW5nLXNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Q0FFQyxHQUVzRDtBQVF2RDs7Ozs7Q0FLQyxHQUNNLE1BQU1DLG9CQUFvQixPQUMvQkMsV0FDQUM7SUFLQSxJQUFJO1FBQ0YsdUJBQXVCO1FBQ3ZCLE1BQU1DLGVBQWUsQ0FBQzs7Ozs7Ozs7QUFRMUIsRUFBRUQsYUFBYUUsaUJBQWlCLENBQUMsNENBQTRDLEVBQUVGLFlBQVlFLGNBQWMsQ0FBQyxDQUFDLEdBQUcsR0FBRztBQUNqSCxFQUFFRixhQUFhRyxlQUFlLENBQUMsY0FBYyxFQUFFSCxZQUFZRyxZQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBRXRGLHFCQUFxQjtRQUNyQixNQUFNQyxhQUFhLENBQUM7OzJGQUVtRSxDQUFDO1FBRXhGLHNCQUFzQjtRQUN0QixNQUFNQyxXQUFXLE1BQU1SLG9FQUFtQkEsQ0FBQ0ksY0FBY0csWUFBWUw7UUFFckUsOENBQThDO1FBQzlDLElBQUk7WUFDRixnQ0FBZ0M7WUFDaEMsTUFBTU8sT0FBT0MsS0FBS0MsS0FBSyxDQUFDSDtZQUV4QiwyQ0FBMkM7WUFDM0MsSUFBSUksTUFBTUMsT0FBTyxDQUFDSixTQUFTQSxLQUFLSyxLQUFLLENBQUNDLENBQUFBLE1BQU8sT0FBT0EsUUFBUSxXQUFXO2dCQUNyRSxPQUFPO29CQUFFTjtnQkFBSztZQUNoQixPQUFPO2dCQUNMLE1BQU0sSUFBSU8sTUFBTTtZQUNsQjtRQUNGLEVBQUUsT0FBT0MsWUFBWTtZQUNuQix5REFBeUQ7WUFDekQseUVBQXlFO1lBQ3pFLE1BQU1DLFlBQVlWLFNBQVNXLEtBQUssQ0FBQztZQUNqQyxJQUFJRCxXQUFXO2dCQUNiLElBQUk7b0JBQ0YsTUFBTVQsT0FBT0MsS0FBS0MsS0FBSyxDQUFDTyxTQUFTLENBQUMsRUFBRTtvQkFDcEMsT0FBTzt3QkFBRVQ7b0JBQUs7Z0JBQ2hCLEVBQUUsT0FBT1csYUFBYTtvQkFDcEIsTUFBTSxJQUFJSixNQUFNO2dCQUNsQjtZQUNGLE9BQU87Z0JBQ0wsa0RBQWtEO2dCQUNsRCxNQUFNUCxPQUFPRCxTQUNWYSxLQUFLLENBQUMsU0FDTkMsR0FBRyxDQUFDQyxDQUFBQTtvQkFDSCx5REFBeUQ7b0JBQ3pELE1BQU1KLFFBQVFJLEtBQUtKLEtBQUssQ0FBQztvQkFDekIsT0FBT0EsUUFBUSxDQUFDQSxLQUFLLENBQUMsRUFBRSxJQUFJQSxLQUFLLENBQUMsRUFBRSxJQUFJQSxLQUFLLENBQUMsRUFBRSxFQUFFSyxJQUFJLEtBQUs7Z0JBQzdELEdBQ0NDLE1BQU0sQ0FBQyxDQUFDVixNQUF1QixDQUFDLENBQUNBLE9BQU9BLElBQUlXLE1BQU0sR0FBRyxLQUFLLENBQUNYLElBQUlZLFFBQVEsQ0FBQztnQkFFM0UsSUFBSWxCLEtBQUtpQixNQUFNLEdBQUcsR0FBRztvQkFDbkIsT0FBTzt3QkFBRWpCO29CQUFLO2dCQUNoQixPQUFPO29CQUNMLE1BQU0sSUFBSU8sTUFBTTtnQkFDbEI7WUFDRjtRQUNGO0lBQ0YsRUFBRSxPQUFPWSxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxnQ0FBZ0NBO1FBQzlDLE9BQU87WUFDTG5CLE1BQU0sRUFBRTtZQUNSbUIsT0FBT0EsaUJBQWlCWixRQUFRWSxNQUFNRSxPQUFPLEdBQUc7UUFDbEQ7SUFDRjtBQUNGLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9odWJ2MS8uL3NlcnZpY2VzL2FpL2ltYWdlLXRhZ2dpbmctc2VydmljZS50cz8xODJhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSW1hZ2UgVGFnZ2luZyBTZXJ2aWNlIC0gVXNlcyBBSSB0byBnZW5lcmF0ZSByZWxldmFudCB0YWdzIGZvciBwaG90b3NcbiAqL1xuXG5pbXBvcnQgeyBjYWxsT3BlbkFJVmlzaW9uQVBJIH0gZnJvbSAnLi9vcGVuYWktc2VydmljZSc7XG5cbi8vIFR5cGVzXG5leHBvcnQgaW50ZXJmYWNlIEltYWdlVGFnZ2luZ1Jlc3VsdCB7XG4gIHRhZ3M6IHN0cmluZ1tdO1xuICBlcnJvcj86IHN0cmluZztcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBBSSB0YWdzIGZvciBhbiBpbWFnZVxuICogQHBhcmFtIGltYWdlRGF0YSBUaGUgaW1hZ2UgZGF0YSAoYmFzZTY0IHN0cmluZyBvciBkYXRhIFVSTClcbiAqIEBwYXJhbSBjb250ZXh0SW5mbyBPcHRpb25hbCBjb250ZXh0IGluZm9ybWF0aW9uIHRvIGhlbHAgZ2VuZXJhdGUgbW9yZSByZWxldmFudCB0YWdzXG4gKiBAcmV0dXJucyBBcnJheSBvZiByZWxldmFudCB0YWdzXG4gKi9cbmV4cG9ydCBjb25zdCBnZW5lcmF0ZUltYWdlVGFncyA9IGFzeW5jIChcbiAgaW1hZ2VEYXRhOiBzdHJpbmcsXG4gIGNvbnRleHRJbmZvPzogeyBcbiAgICBoZWFkaW5nQ29udGV4dD86IHN0cmluZztcbiAgICBkb2N1bWVudFR5cGU/OiBzdHJpbmc7XG4gIH1cbik6IFByb21pc2U8SW1hZ2VUYWdnaW5nUmVzdWx0PiA9PiB7XG4gIHRyeSB7XG4gICAgLy8gQ3JlYXRlIHN5c3RlbSBwcm9tcHRcbiAgICBjb25zdCBzeXN0ZW1Qcm9tcHQgPSBgWW91IGFyZSBhbiBleHBlcnQgaW1hZ2UgYW5hbHl6ZXIgZm9yIHJlYWwgZXN0YXRlIGFuZCBwcm9wZXJ0eSBkb2N1bWVudGF0aW9uLlxuWW91ciB0YXNrIGlzIHRvIGFuYWx5emUgdGhlIHByb3ZpZGVkIGltYWdlIGFuZCBnZW5lcmF0ZSAzLTcgcmVsZXZhbnQsIHNwZWNpZmljIHRhZ3MgdGhhdCBhY2N1cmF0ZWx5IGRlc2NyaWJlIFxudGhlIGtleSBlbGVtZW50cyBpbiB0aGUgaW1hZ2UuIFRhZ3Mgc2hvdWxkIGJlIGNvbmNpc2UgKDEtMyB3b3JkcyksIGRlc2NyaXB0aXZlLCBhbmQgcmVsZXZhbnQgZm9yIFxub3JnYW5pemluZyBpbWFnZXMgaW4gYSByZWFsIGVzdGF0ZSBvciBwcm9wZXJ0eSBjb250ZXh0LlxuXG5UYWdzIHNob3VsZCBPTkxZIGluY2x1ZGUgdGhlIG1vc3QgaW1wb3J0YW50IHZpc3VhbCBlbGVtZW50cyBhbmQgY2hhcmFjdGVyaXN0aWNzLiBcbkRvIG5vdCBpbmNsdWRlIGdlbmVyaWMgdGFncyBsaWtlIFwicGhvdG9cIiBvciBcImltYWdlXCIuXG5cbiR7Y29udGV4dEluZm8/LmhlYWRpbmdDb250ZXh0ID8gYFRoZSBpbWFnZSBpcyBiZWluZyB1c2VkIGluIGEgc2VjdGlvbiBhYm91dDogJHtjb250ZXh0SW5mby5oZWFkaW5nQ29udGV4dH1gIDogJyd9XG4ke2NvbnRleHRJbmZvPy5kb2N1bWVudFR5cGUgPyBgVGhpcyBpcyBmb3IgYSAke2NvbnRleHRJbmZvLmRvY3VtZW50VHlwZX0gZG9jdW1lbnQuYCA6ICcnfWA7XG5cbiAgICAvLyBDcmVhdGUgdXNlciBwcm9tcHRcbiAgICBjb25zdCB1c2VyUHJvbXB0ID0gYEFuYWx5emUgdGhpcyBpbWFnZSBhbmQgZ2VuZXJhdGUgMy03IHJlbGV2YW50IHRhZ3MgdGhhdCBkZXNjcmliZSB3aGF0J3MgaW4gdGhlIGltYWdlLlxuUmV0dXJuIE9OTFkgYSBKU09OIGFycmF5IG9mIHN0cmluZ3Mgd2l0aCBubyBleHBsYW5hdGlvbiBvciBhZGRpdGlvbmFsIHRleHQuXG5FeGFtcGxlIHJlc3BvbnNlIGZvcm1hdDogW1wiZXh0ZXJpb3Igdmlld1wiLCBcImJyaWNrIGZhY2FkZVwiLCBcImxhbmRzY2FwaW5nXCIsIFwiZ29vZCBjb25kaXRpb25cIl1gO1xuXG4gICAgLy8gQ2FsbCB0aGUgVmlzaW9uIEFQSVxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2FsbE9wZW5BSVZpc2lvbkFQSShzeXN0ZW1Qcm9tcHQsIHVzZXJQcm9tcHQsIGltYWdlRGF0YSk7XG4gICAgXG4gICAgLy8gUGFyc2UgdGhlIEpTT04gcmVzcG9uc2UgdG8gZXh0cmFjdCB0aGUgdGFnc1xuICAgIHRyeSB7XG4gICAgICAvLyBUcnkgdG8gcGFyc2UgYXMgSlNPTiBkaXJlY3RseVxuICAgICAgY29uc3QgdGFncyA9IEpTT04ucGFyc2UocmVzcG9uc2UpIGFzIHN0cmluZ1tdO1xuICAgICAgXG4gICAgICAvLyBWYWxpZGF0ZSB0aGF0IHdlIGdvdCBhbiBhcnJheSBvZiBzdHJpbmdzXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh0YWdzKSAmJiB0YWdzLmV2ZXJ5KHRhZyA9PiB0eXBlb2YgdGFnID09PSAnc3RyaW5nJykpIHtcbiAgICAgICAgcmV0dXJuIHsgdGFncyB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJlc3BvbnNlIGZvcm1hdCcpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKHBhcnNlRXJyb3IpIHtcbiAgICAgIC8vIElmIGRpcmVjdCBwYXJzaW5nIGZhaWxzLCB0cnkgdG8gZXh0cmFjdCBKU09OIGZyb20gdGV4dFxuICAgICAgLy8gVXNpbmcgYSByZWdleCB0aGF0IHdvcmtzIHdpdGggb2xkZXIgSlMgdmVyc2lvbnMgKHdpdGhvdXQgdGhlICdzJyBmbGFnKVxuICAgICAgY29uc3QganNvbk1hdGNoID0gcmVzcG9uc2UubWF0Y2goL1xcWyhbXFxzXFxTXSo/KVxcXS8pO1xuICAgICAgaWYgKGpzb25NYXRjaCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHRhZ3MgPSBKU09OLnBhcnNlKGpzb25NYXRjaFswXSkgYXMgc3RyaW5nW107XG4gICAgICAgICAgcmV0dXJuIHsgdGFncyB9O1xuICAgICAgICB9IGNhdGNoIChuZXN0ZWRFcnJvcikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IHBhcnNlIHRhZ3MgZnJvbSByZXNwb25zZScpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIHZhbGlkIEpTT04sIG1hbnVhbGx5IGV4dHJhY3QgdGFnc1xuICAgICAgICBjb25zdCB0YWdzID0gcmVzcG9uc2VcbiAgICAgICAgICAuc3BsaXQoL1tcXG4sXS8pXG4gICAgICAgICAgLm1hcChsaW5lID0+IHtcbiAgICAgICAgICAgIC8vIEV4dHJhY3QgYW55dGhpbmcgdGhhdCBsb29rcyBsaWtlIGEgdGFnIChxdW90ZXMgb3Igbm90KVxuICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBsaW5lLm1hdGNoKC9cIihbXlwiXSspXCJ8JyhbXiddKyknfChbYS16QS1aXFxzLV0rKS8pO1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoID8gKG1hdGNoWzFdIHx8IG1hdGNoWzJdIHx8IG1hdGNoWzNdKS50cmltKCkgOiBudWxsO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmZpbHRlcigodGFnKTogdGFnIGlzIHN0cmluZyA9PiAhIXRhZyAmJiB0YWcubGVuZ3RoID4gMCAmJiAhdGFnLmluY2x1ZGVzKCc6JykpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHRhZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJldHVybiB7IHRhZ3MgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBleHRyYWN0IHRhZ3MgZnJvbSByZXNwb25zZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdlbmVyYXRpbmcgaW1hZ2UgdGFnczonLCBlcnJvcik7XG4gICAgcmV0dXJuIHsgXG4gICAgICB0YWdzOiBbXSwgXG4gICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvciBnZW5lcmF0aW5nIHRhZ3MnIFxuICAgIH07XG4gIH1cbn07Il0sIm5hbWVzIjpbImNhbGxPcGVuQUlWaXNpb25BUEkiLCJnZW5lcmF0ZUltYWdlVGFncyIsImltYWdlRGF0YSIsImNvbnRleHRJbmZvIiwic3lzdGVtUHJvbXB0IiwiaGVhZGluZ0NvbnRleHQiLCJkb2N1bWVudFR5cGUiLCJ1c2VyUHJvbXB0IiwicmVzcG9uc2UiLCJ0YWdzIiwiSlNPTiIsInBhcnNlIiwiQXJyYXkiLCJpc0FycmF5IiwiZXZlcnkiLCJ0YWciLCJFcnJvciIsInBhcnNlRXJyb3IiLCJqc29uTWF0Y2giLCJtYXRjaCIsIm5lc3RlZEVycm9yIiwic3BsaXQiLCJtYXAiLCJsaW5lIiwidHJpbSIsImZpbHRlciIsImxlbmd0aCIsImluY2x1ZGVzIiwiZXJyb3IiLCJjb25zb2xlIiwibWVzc2FnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./services/ai/image-tagging-service.ts\n");

/***/ }),

/***/ "(rsc)/./services/ai/openai-service.ts":
/*!***************************************!*\
  !*** ./services/ai/openai-service.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   callOpenAIAPI: () => (/* binding */ callOpenAIAPI),\n/* harmony export */   callOpenAIVisionAPI: () => (/* binding */ callOpenAIVisionAPI),\n/* harmony export */   createReferenceContext: () => (/* binding */ createReferenceContext),\n/* harmony export */   processImageForOpenAI: () => (/* binding */ processImageForOpenAI)\n/* harmony export */ });\n/**\n * OpenAI Service for interacting with the OpenAI API\n */ // OpenAI API Types\n// OpenAI API configuration\nconst OPENAI_API_URL = \"https://api.openai.com/v1/chat/completions\";\nconst OPENAI_API_KEY = process.env.OPENAI_API_KEY;\n/**\n * Calls the OpenAI API with the given prompts\n * @param systemPrompt The system prompt to guide OpenAI's behavior\n * @param userPrompt The user's specific request\n * @returns The AI-generated text response\n */ const callOpenAIAPI = async (systemPrompt, userPrompt)=>{\n    try {\n        if (!OPENAI_API_KEY) {\n            throw new Error(\"OpenAI API key not configured\");\n        }\n        const requestBody = {\n            model: \"gpt-4-turbo\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: systemPrompt\n                },\n                {\n                    role: \"user\",\n                    content: userPrompt\n                }\n            ],\n            max_tokens: 1000,\n            temperature: 0.7\n        };\n        const response = await fetch(OPENAI_API_URL, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${OPENAI_API_KEY}`\n            },\n            body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n            const errorText = await response.text();\n            throw new Error(`OpenAI API error: ${response.status} ${errorText}`);\n        }\n        const data = await response.json();\n        return data.choices[0]?.message?.content || \"\";\n    } catch (error) {\n        console.error(\"Error calling OpenAI API:\", error);\n        throw error;\n    }\n};\n/**\n * Processes an image for OpenAI's Vision API\n * @param photoData The image data as a base64 string or data URL\n * @returns Formatted image content object for the API request\n */ const processImageForOpenAI = (photoData)=>{\n    if (!photoData) return null;\n    try {\n        let base64Data;\n        // Handle data URL vs raw base64\n        if (photoData.startsWith(\"data:image\")) {\n            const matches = photoData.match(/^data:image\\/([a-zA-Z]+);base64,(.+)$/);\n            if (matches && matches.length >= 3) {\n                base64Data = matches[2].trim();\n            } else {\n                throw new Error(\"Invalid data URL format\");\n            }\n        } else {\n            // It's raw base64, use it directly\n            base64Data = photoData.trim().replace(/\\s/g, \"\");\n        }\n        // Validate base64 data\n        if (!base64Data || base64Data.length === 0) {\n            throw new Error(\"Empty base64 data\");\n        }\n        // Return the formatted image content\n        return {\n            type: \"image_url\",\n            image_url: {\n                url: `data:image/jpeg;base64,${base64Data}`,\n                detail: \"low\" // Using 'low' detail for better performance\n            }\n        };\n    } catch (error) {\n        console.error(\"Error processing image for OpenAI:\", error);\n        return null;\n    }\n};\n/**\n * Sends a multimodal request to OpenAI with text and image\n * @param systemPrompt The system prompt to guide OpenAI's behavior\n * @param userPrompt The user's specific request\n * @param photoData The image data as a base64 string or data URL\n * @returns The AI-generated text response\n */ const callOpenAIVisionAPI = async (systemPrompt, userPrompt, photoData)=>{\n    try {\n        if (!OPENAI_API_KEY) {\n            throw new Error(\"OpenAI API key not configured\");\n        }\n        // Process the image\n        const imageContent = processImageForOpenAI(photoData);\n        if (!imageContent) {\n            throw new Error(\"Failed to process image data\");\n        }\n        // Create the request body with image\n        const requestBody = {\n            model: \"gpt-4o\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: systemPrompt\n                },\n                {\n                    role: \"user\",\n                    content: [\n                        {\n                            type: \"text\",\n                            text: userPrompt\n                        },\n                        imageContent\n                    ]\n                }\n            ],\n            max_tokens: 1000,\n            temperature: 0.7\n        };\n        // Make the API request\n        const response = await fetch(OPENAI_API_URL, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${OPENAI_API_KEY}`\n            },\n            body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n            const errorText = await response.text();\n            throw new Error(`OpenAI Vision API error: ${response.status} ${errorText}`);\n        }\n        const data = await response.json();\n        return data.choices[0]?.message?.content || \"\";\n    } catch (error) {\n        console.error(\"Error calling OpenAI Vision API:\", error);\n        throw error;\n    }\n};\n// Reference materials utilities\n/**\n * Creates a formatted reference context from materials\n * @param materials Object containing various reference materials\n * @returns Formatted reference context string\n */ const createReferenceContext = (materials)=>{\n    let context = \"REFERENCE MATERIALS AND GUIDELINES\\n\\n\";\n    if (materials.terminology) {\n        context += \"TERMINOLOGY:\\n\";\n        for (const [term, definition] of Object.entries(materials.terminology)){\n            context += `- ${term}: ${definition}\\n`;\n        }\n        context += \"\\n\";\n    }\n    if (materials.styleGuide) {\n        context += `STYLE GUIDELINES:\\n${materials.styleGuide}\\n\\n`;\n    }\n    if (materials.namingConventions) {\n        context += `NAMING CONVENTIONS:\\n${materials.namingConventions}\\n\\n`;\n    }\n    if (materials.toneGuidelines) {\n        context += `TONE GUIDELINES:\\n${materials.toneGuidelines}\\n\\n`;\n    }\n    if (materials.examples) {\n        context += \"EXAMPLES:\\n\";\n        for (const [exampleType, example] of Object.entries(materials.examples)){\n            context += `### ${exampleType} Example:\\n${example}\\n\\n`;\n        }\n    }\n    if (materials.legalText) {\n        context += `REQUIRED LEGAL TEXT:\\n${materials.legalText}\\n\\n`;\n    }\n    return context;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SUFDYjtJQUVBLElBQUlELFVBQVVPLFVBQVUsRUFBRTtRQUN4Qk4sV0FBVyxDQUFDLG1CQUFtQixFQUFFRCxVQUFVTyxVQUFVLENBQUMsSUFBSSxDQUFDO0lBQzdEO0lBRUEsSUFBSVAsVUFBVVEsaUJBQWlCLEVBQUU7UUFDL0JQLFdBQVcsQ0FBQyxxQkFBcUIsRUFBRUQsVUFBVVEsaUJBQWlCLENBQUMsSUFBSSxDQUFDO0lBQ3RFO0lBRUEsSUFBSVIsVUFBVVMsY0FBYyxFQUFFO1FBQzVCUixXQUFXLENBQUMsa0JBQWtCLEVBQUVELFVBQVVTLGNBQWMsQ0FBQyxJQUFJLENBQUM7SUFDaEU7SUFFQSxJQUFJVCxVQUFVVSxRQUFRLEVBQUU7UUFDdEJULFdBQVc7UUFDWCxLQUFLLE1BQU0sQ0FBQ1UsYUFBYUMsUUFBUSxJQUFJUCxPQUFPQyxPQUFPLENBQUNOLFVBQVVVLFFBQVEsRUFBRztZQUN2RVQsV0FBVyxDQUFDLElBQUksRUFBRVUsWUFBWSxXQUFXLEVBQUVDLFFBQVEsSUFBSSxDQUFDO1FBQzFEO0lBQ0Y7SUFFQSxJQUFJWixVQUFVYSxTQUFTLEVBQUU7UUFDdkJaLFdBQVcsQ0FBQyxzQkFBc0IsRUFBRUQsVUFBVWEsU0FBUyxDQUFDLElBQUksQ0FBQztJQUMvRDtJQUVBLE9BQU9aO0FBQ1QsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2h1YnYxLy4vc2VydmljZXMvYWkvb3BlbmFpLXNlcnZpY2UudHM/NDE0MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE9wZW5BSSBTZXJ2aWNlIGZvciBpbnRlcmFjdGluZyB3aXRoIHRoZSBPcGVuQUkgQVBJXG4gKi9cblxuLy8gT3BlbkFJIEFQSSBUeXBlc1xuZXhwb3J0IGludGVyZmFjZSBPcGVuQUlSZXF1ZXN0Qm9keSB7XG4gIG1vZGVsOiBzdHJpbmc7XG4gIG1lc3NhZ2VzOiB7XG4gICAgcm9sZTogJ3VzZXInIHwgJ2Fzc2lzdGFudCcgfCAnc3lzdGVtJztcbiAgICBjb250ZW50OiBzdHJpbmcgfCBBcnJheTx7XG4gICAgICB0eXBlOiBzdHJpbmc7XG4gICAgICBba2V5OiBzdHJpbmddOiB1bmtub3duO1xuICAgIH0+O1xuICB9W107XG4gIG1heF90b2tlbnM/OiBudW1iZXI7XG4gIHRlbXBlcmF0dXJlPzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9wZW5BSVJlc3BvbnNlIHtcbiAgaWQ6IHN0cmluZztcbiAgb2JqZWN0OiBzdHJpbmc7XG4gIGNyZWF0ZWQ6IG51bWJlcjtcbiAgbW9kZWw6IHN0cmluZztcbiAgY2hvaWNlczoge1xuICAgIGluZGV4OiBudW1iZXI7XG4gICAgbWVzc2FnZToge1xuICAgICAgcm9sZTogc3RyaW5nO1xuICAgICAgY29udGVudDogc3RyaW5nO1xuICAgIH07XG4gICAgZmluaXNoX3JlYXNvbjogc3RyaW5nO1xuICB9W107XG4gIHVzYWdlOiB7XG4gICAgcHJvbXB0X3Rva2VuczogbnVtYmVyO1xuICAgIGNvbXBsZXRpb25fdG9rZW5zOiBudW1iZXI7XG4gICAgdG90YWxfdG9rZW5zOiBudW1iZXI7XG4gIH07XG59XG5cbi8vIE9wZW5BSSBBUEkgY29uZmlndXJhdGlvblxuY29uc3QgT1BFTkFJX0FQSV9VUkwgPSAnaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MS9jaGF0L2NvbXBsZXRpb25zJztcbmNvbnN0IE9QRU5BSV9BUElfS0VZID0gcHJvY2Vzcy5lbnYuT1BFTkFJX0FQSV9LRVk7XG5cbi8qKlxuICogQ2FsbHMgdGhlIE9wZW5BSSBBUEkgd2l0aCB0aGUgZ2l2ZW4gcHJvbXB0c1xuICogQHBhcmFtIHN5c3RlbVByb21wdCBUaGUgc3lzdGVtIHByb21wdCB0byBndWlkZSBPcGVuQUkncyBiZWhhdmlvclxuICogQHBhcmFtIHVzZXJQcm9tcHQgVGhlIHVzZXIncyBzcGVjaWZpYyByZXF1ZXN0XG4gKiBAcmV0dXJucyBUaGUgQUktZ2VuZXJhdGVkIHRleHQgcmVzcG9uc2VcbiAqL1xuZXhwb3J0IGNvbnN0IGNhbGxPcGVuQUlBUEkgPSBhc3luYyAoc3lzdGVtUHJvbXB0OiBzdHJpbmcsIHVzZXJQcm9tcHQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gIHRyeSB7XG4gICAgaWYgKCFPUEVOQUlfQVBJX0tFWSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdPcGVuQUkgQVBJIGtleSBub3QgY29uZmlndXJlZCcpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlcXVlc3RCb2R5OiBPcGVuQUlSZXF1ZXN0Qm9keSA9IHtcbiAgICAgIG1vZGVsOiAnZ3B0LTQtdHVyYm8nLFxuICAgICAgbWVzc2FnZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHJvbGU6ICdzeXN0ZW0nLFxuICAgICAgICAgIGNvbnRlbnQ6IHN5c3RlbVByb21wdCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHJvbGU6ICd1c2VyJyxcbiAgICAgICAgICBjb250ZW50OiB1c2VyUHJvbXB0LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIG1heF90b2tlbnM6IDEwMDAsXG4gICAgICB0ZW1wZXJhdHVyZTogMC43LFxuICAgIH07XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKE9QRU5BSV9BUElfVVJMLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7T1BFTkFJX0FQSV9LRVl9YCxcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0Qm9keSksXG4gICAgfSk7XG5cbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICBjb25zdCBlcnJvclRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE9wZW5BSSBBUEkgZXJyb3I6ICR7cmVzcG9uc2Uuc3RhdHVzfSAke2Vycm9yVGV4dH1gKTtcbiAgICB9XG5cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpIGFzIE9wZW5BSVJlc3BvbnNlO1xuICAgIHJldHVybiBkYXRhLmNob2ljZXNbMF0/Lm1lc3NhZ2U/LmNvbnRlbnQgfHwgJyc7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgY2FsbGluZyBPcGVuQUkgQVBJOicsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxuLyoqXG4gKiBQcm9jZXNzZXMgYW4gaW1hZ2UgZm9yIE9wZW5BSSdzIFZpc2lvbiBBUElcbiAqIEBwYXJhbSBwaG90b0RhdGEgVGhlIGltYWdlIGRhdGEgYXMgYSBiYXNlNjQgc3RyaW5nIG9yIGRhdGEgVVJMXG4gKiBAcmV0dXJucyBGb3JtYXR0ZWQgaW1hZ2UgY29udGVudCBvYmplY3QgZm9yIHRoZSBBUEkgcmVxdWVzdFxuICovXG5leHBvcnQgY29uc3QgcHJvY2Vzc0ltYWdlRm9yT3BlbkFJID0gKHBob3RvRGF0YTogc3RyaW5nKTogeyBcbiAgdHlwZTogc3RyaW5nOyBcbiAgaW1hZ2VfdXJsOiB7IFxuICAgIHVybDogc3RyaW5nOyBcbiAgICBkZXRhaWw6IHN0cmluZzsgXG4gIH07IFxufSB8IG51bGwgPT4ge1xuICBpZiAoIXBob3RvRGF0YSkgcmV0dXJuIG51bGw7XG5cbiAgdHJ5IHtcbiAgICBsZXQgYmFzZTY0RGF0YTogc3RyaW5nO1xuICAgIFxuICAgIC8vIEhhbmRsZSBkYXRhIFVSTCB2cyByYXcgYmFzZTY0XG4gICAgaWYgKHBob3RvRGF0YS5zdGFydHNXaXRoKCdkYXRhOmltYWdlJykpIHtcbiAgICAgIGNvbnN0IG1hdGNoZXMgPSBwaG90b0RhdGEubWF0Y2goL15kYXRhOmltYWdlXFwvKFthLXpBLVpdKyk7YmFzZTY0LCguKykkLyk7XG4gICAgICBcbiAgICAgIGlmIChtYXRjaGVzICYmIG1hdGNoZXMubGVuZ3RoID49IDMpIHtcbiAgICAgICAgYmFzZTY0RGF0YSA9IG1hdGNoZXNbMl0udHJpbSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBkYXRhIFVSTCBmb3JtYXRcIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEl0J3MgcmF3IGJhc2U2NCwgdXNlIGl0IGRpcmVjdGx5XG4gICAgICBiYXNlNjREYXRhID0gcGhvdG9EYXRhLnRyaW0oKS5yZXBsYWNlKC9cXHMvZywgJycpO1xuICAgIH1cbiAgICBcbiAgICAvLyBWYWxpZGF0ZSBiYXNlNjQgZGF0YVxuICAgIGlmICghYmFzZTY0RGF0YSB8fCBiYXNlNjREYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW1wdHkgYmFzZTY0IGRhdGFcIik7XG4gICAgfVxuICAgIFxuICAgIC8vIFJldHVybiB0aGUgZm9ybWF0dGVkIGltYWdlIGNvbnRlbnRcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJpbWFnZV91cmxcIixcbiAgICAgIGltYWdlX3VybDoge1xuICAgICAgICB1cmw6IGBkYXRhOmltYWdlL2pwZWc7YmFzZTY0LCR7YmFzZTY0RGF0YX1gLFxuICAgICAgICBkZXRhaWw6IFwibG93XCIgLy8gVXNpbmcgJ2xvdycgZGV0YWlsIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2VcbiAgICAgIH1cbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBwcm9jZXNzaW5nIGltYWdlIGZvciBPcGVuQUk6XCIsIGVycm9yKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBTZW5kcyBhIG11bHRpbW9kYWwgcmVxdWVzdCB0byBPcGVuQUkgd2l0aCB0ZXh0IGFuZCBpbWFnZVxuICogQHBhcmFtIHN5c3RlbVByb21wdCBUaGUgc3lzdGVtIHByb21wdCB0byBndWlkZSBPcGVuQUkncyBiZWhhdmlvclxuICogQHBhcmFtIHVzZXJQcm9tcHQgVGhlIHVzZXIncyBzcGVjaWZpYyByZXF1ZXN0XG4gKiBAcGFyYW0gcGhvdG9EYXRhIFRoZSBpbWFnZSBkYXRhIGFzIGEgYmFzZTY0IHN0cmluZyBvciBkYXRhIFVSTFxuICogQHJldHVybnMgVGhlIEFJLWdlbmVyYXRlZCB0ZXh0IHJlc3BvbnNlXG4gKi9cbmV4cG9ydCBjb25zdCBjYWxsT3BlbkFJVmlzaW9uQVBJID0gYXN5bmMgKFxuICBzeXN0ZW1Qcm9tcHQ6IHN0cmluZywgXG4gIHVzZXJQcm9tcHQ6IHN0cmluZywgXG4gIHBob3RvRGF0YTogc3RyaW5nXG4pOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICB0cnkge1xuICAgIGlmICghT1BFTkFJX0FQSV9LRVkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignT3BlbkFJIEFQSSBrZXkgbm90IGNvbmZpZ3VyZWQnKTtcbiAgICB9XG5cbiAgICAvLyBQcm9jZXNzIHRoZSBpbWFnZVxuICAgIGNvbnN0IGltYWdlQ29udGVudCA9IHByb2Nlc3NJbWFnZUZvck9wZW5BSShwaG90b0RhdGEpO1xuICAgIFxuICAgIGlmICghaW1hZ2VDb250ZW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBwcm9jZXNzIGltYWdlIGRhdGEnKTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgdGhlIHJlcXVlc3QgYm9keSB3aXRoIGltYWdlXG4gICAgY29uc3QgcmVxdWVzdEJvZHk6IE9wZW5BSVJlcXVlc3RCb2R5ID0ge1xuICAgICAgbW9kZWw6ICdncHQtNG8nLFxuICAgICAgbWVzc2FnZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHJvbGU6ICdzeXN0ZW0nLFxuICAgICAgICAgIGNvbnRlbnQ6IHN5c3RlbVByb21wdCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHJvbGU6ICd1c2VyJyxcbiAgICAgICAgICBjb250ZW50OiBbXG4gICAgICAgICAgICB7IHR5cGU6IFwidGV4dFwiLCB0ZXh0OiB1c2VyUHJvbXB0IH0sXG4gICAgICAgICAgICBpbWFnZUNvbnRlbnRcbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBtYXhfdG9rZW5zOiAxMDAwLFxuICAgICAgdGVtcGVyYXR1cmU6IDAuNyxcbiAgICB9O1xuXG4gICAgLy8gTWFrZSB0aGUgQVBJIHJlcXVlc3RcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKE9QRU5BSV9BUElfVVJMLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7T1BFTkFJX0FQSV9LRVl9YCxcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0Qm9keSksXG4gICAgfSk7XG5cbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICBjb25zdCBlcnJvclRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE9wZW5BSSBWaXNpb24gQVBJIGVycm9yOiAke3Jlc3BvbnNlLnN0YXR1c30gJHtlcnJvclRleHR9YCk7XG4gICAgfVxuXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKSBhcyBPcGVuQUlSZXNwb25zZTtcbiAgICByZXR1cm4gZGF0YS5jaG9pY2VzWzBdPy5tZXNzYWdlPy5jb250ZW50IHx8ICcnO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNhbGxpbmcgT3BlbkFJIFZpc2lvbiBBUEk6JywgZXJyb3IpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG4vLyBSZWZlcmVuY2UgbWF0ZXJpYWxzIHV0aWxpdGllc1xuLyoqXG4gKiBDcmVhdGVzIGEgZm9ybWF0dGVkIHJlZmVyZW5jZSBjb250ZXh0IGZyb20gbWF0ZXJpYWxzXG4gKiBAcGFyYW0gbWF0ZXJpYWxzIE9iamVjdCBjb250YWluaW5nIHZhcmlvdXMgcmVmZXJlbmNlIG1hdGVyaWFsc1xuICogQHJldHVybnMgRm9ybWF0dGVkIHJlZmVyZW5jZSBjb250ZXh0IHN0cmluZ1xuICovXG5leHBvcnQgY29uc3QgY3JlYXRlUmVmZXJlbmNlQ29udGV4dCA9IChtYXRlcmlhbHM6IHtcbiAgdGVybWlub2xvZ3k/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuICBzdHlsZUd1aWRlPzogc3RyaW5nO1xuICBuYW1pbmdDb252ZW50aW9ucz86IHN0cmluZztcbiAgdG9uZUd1aWRlbGluZXM/OiBzdHJpbmc7XG4gIGV4YW1wbGVzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbiAgbGVnYWxUZXh0Pzogc3RyaW5nO1xufSk6IHN0cmluZyA9PiB7XG4gIGxldCBjb250ZXh0ID0gJ1JFRkVSRU5DRSBNQVRFUklBTFMgQU5EIEdVSURFTElORVNcXG5cXG4nO1xuXG4gIGlmIChtYXRlcmlhbHMudGVybWlub2xvZ3kpIHtcbiAgICBjb250ZXh0ICs9ICdURVJNSU5PTE9HWTpcXG4nO1xuICAgIGZvciAoY29uc3QgW3Rlcm0sIGRlZmluaXRpb25dIG9mIE9iamVjdC5lbnRyaWVzKG1hdGVyaWFscy50ZXJtaW5vbG9neSkpIHtcbiAgICAgIGNvbnRleHQgKz0gYC0gJHt0ZXJtfTogJHtkZWZpbml0aW9ufVxcbmA7XG4gICAgfVxuICAgIGNvbnRleHQgKz0gJ1xcbic7XG4gIH1cblxuICBpZiAobWF0ZXJpYWxzLnN0eWxlR3VpZGUpIHtcbiAgICBjb250ZXh0ICs9IGBTVFlMRSBHVUlERUxJTkVTOlxcbiR7bWF0ZXJpYWxzLnN0eWxlR3VpZGV9XFxuXFxuYDtcbiAgfVxuXG4gIGlmIChtYXRlcmlhbHMubmFtaW5nQ29udmVudGlvbnMpIHtcbiAgICBjb250ZXh0ICs9IGBOQU1JTkcgQ09OVkVOVElPTlM6XFxuJHttYXRlcmlhbHMubmFtaW5nQ29udmVudGlvbnN9XFxuXFxuYDtcbiAgfVxuXG4gIGlmIChtYXRlcmlhbHMudG9uZUd1aWRlbGluZXMpIHtcbiAgICBjb250ZXh0ICs9IGBUT05FIEdVSURFTElORVM6XFxuJHttYXRlcmlhbHMudG9uZUd1aWRlbGluZXN9XFxuXFxuYDtcbiAgfVxuXG4gIGlmIChtYXRlcmlhbHMuZXhhbXBsZXMpIHtcbiAgICBjb250ZXh0ICs9ICdFWEFNUExFUzpcXG4nO1xuICAgIGZvciAoY29uc3QgW2V4YW1wbGVUeXBlLCBleGFtcGxlXSBvZiBPYmplY3QuZW50cmllcyhtYXRlcmlhbHMuZXhhbXBsZXMpKSB7XG4gICAgICBjb250ZXh0ICs9IGAjIyMgJHtleGFtcGxlVHlwZX0gRXhhbXBsZTpcXG4ke2V4YW1wbGV9XFxuXFxuYDtcbiAgICB9XG4gIH1cblxuICBpZiAobWF0ZXJpYWxzLmxlZ2FsVGV4dCkge1xuICAgIGNvbnRleHQgKz0gYFJFUVVJUkVEIExFR0FMIFRFWFQ6XFxuJHttYXRlcmlhbHMubGVnYWxUZXh0fVxcblxcbmA7XG4gIH1cblxuICByZXR1cm4gY29udGV4dDtcbn07Il0sIm5hbWVzIjpbIk9QRU5BSV9BUElfVVJMIiwiT1BFTkFJX0FQSV9LRVkiLCJwcm9jZXNzIiwiZW52IiwiY2FsbE9wZW5BSUFQSSIsInN5c3RlbVByb21wdCIsInVzZXJQcm9tcHQiLCJFcnJvciIsInJlcXVlc3RCb2R5IiwibW9kZWwiLCJtZXNzYWdlcyIsInJvbGUiLCJjb250ZW50IiwibWF4X3Rva2VucyIsInRlbXBlcmF0dXJlIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsIm9rIiwiZXJyb3JUZXh0IiwidGV4dCIsInN0YXR1cyIsImRhdGEiLCJqc29uIiwiY2hvaWNlcyIsIm1lc3NhZ2UiLCJlcnJvciIsImNvbnNvbGUiLCJwcm9jZXNzSW1hZ2VGb3JPcGVuQUkiLCJwaG90b0RhdGEiLCJiYXNlNjREYXRhIiwic3RhcnRzV2l0aCIsIm1hdGNoZXMiLCJtYXRjaCIsImxlbmd0aCIsInRyaW0iLCJyZXBsYWNlIiwidHlwZSIsImltYWdlX3VybCIsInVybCIsImRldGFpbCIsImNhbGxPcGVuQUlWaXNpb25BUEkiLCJpbWFnZUNvbnRlbnQiLCJjcmVhdGVSZWZlcmVuY2VDb250ZXh0IiwibWF0ZXJpYWxzIiwiY29udGV4dCIsInRlcm1pbm9sb2d5IiwidGVybSIsImRlZmluaXRpb24iLCJPYmplY3QiLCJlbnRyaWVzIiwic3R5bGVHdWlkZSIsIm5hbWluZ0NvbnZlbnRpb25zIiwidG9uZUd1aWRlbGluZXMiLCJleGFtcGxlcyIsImV4YW1wbGVUeXBlIiwiZXhhbXBsZSIsImxlZ2FsVGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./services/ai/openai-service.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fimage-description%2Froute&page=%2Fapi%2Fimage-description%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fimage-description%2Froute.ts&appDir=%2FUsers%2Fshansrikanthan%2FDocuments%2FGitHub%2Fhubv1%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fshansrikanthan%2FDocuments%2FGitHub%2Fhubv1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();