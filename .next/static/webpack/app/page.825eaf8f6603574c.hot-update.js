"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/pdf-utils.ts":
/*!**************************!*\
  !*** ./lib/pdf-utils.ts ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   exportToPDF: function() { return /* binding */ exportToPDF; }\n/* harmony export */ });\n/**\n * PDF utility functions for exporting content\n */ // Import necessary types and interfaces\n/**\n * Exports a DOM element to PDF using server-side PDF generation\n * This preserves the original functionality but removes canvas dependency\n * @param element The DOM element to export\n * @param filename The filename for the PDF\n * @returns Promise that resolves when the PDF is exported\n */ const exportToPDF = async (element, filename)=>{\n    try {\n        if ( true && element) {\n            // Show loading indicator\n            const loadingToast = showToast(\"Generating PDF...\", \"Please wait while your document is prepared.\");\n            // First, make a clone of the element to avoid modifying the original\n            const clonedElement = element.cloneNode(true);\n            // Add a special class for print-only styling\n            clonedElement.classList.add(\"pdf-export-container\");\n            // Remove UI elements that shouldn't appear in the PDF\n            const uiElementsToRemove = clonedElement.querySelectorAll('.floating-menu, .bubble-menu, button, [role=\"button\"], .tippy-box, .group-hover\\\\:opacity-100');\n            uiElementsToRemove.forEach((el)=>{\n                if (el.parentNode) {\n                    el.parentNode.removeChild(el);\n                }\n            });\n            // Apply typography styles to content exactly as in the original implementation\n            const paragraphs = clonedElement.querySelectorAll(\"p\");\n            paragraphs.forEach((p)=>{\n                p.style.fontSize = \"11pt\";\n                p.style.lineHeight = \"1.5\";\n                p.style.margin = \"0.5em 0\";\n            });\n            const h1Elements = clonedElement.querySelectorAll(\"h1\");\n            h1Elements.forEach((h1)=>{\n                h1.style.fontSize = \"13pt\";\n                h1.style.fontWeight = \"bold\";\n                h1.style.margin = \"0.7em 0 0.3em\";\n            });\n            const h2Elements = clonedElement.querySelectorAll(\"h2\");\n            h2Elements.forEach((h2)=>{\n                h2.style.fontSize = \"12pt\";\n                h2.style.fontWeight = \"bold\";\n                h2.style.margin = \"0.6em 0 0.3em\";\n            });\n            // Get the page containers - maintain the original page handling logic\n            const pageContainers = clonedElement.querySelectorAll(\".page-container\");\n            // Create a formatted document with each page properly laid out\n            const formattedDocument = document.createElement(\"div\");\n            formattedDocument.className = \"pdf-document\";\n            formattedDocument.style.width = \"8.5in\";\n            formattedDocument.style.margin = \"0 auto\";\n            formattedDocument.style.backgroundColor = \"#fff\";\n            // Process each page one at a time - maintaining the original page-by-page approach\n            for(let i = 0; i < pageContainers.length; i++){\n                const pageContainer = pageContainers[i];\n                const pageClone = pageContainer.cloneNode(true);\n                // Style the page exactly as in the original implementation\n                pageClone.style.transform = \"none\";\n                pageClone.style.position = \"relative\";\n                pageClone.style.top = \"0\";\n                pageClone.style.left = \"0\";\n                pageClone.style.width = \"8.5in\";\n                pageClone.style.height = \"11in\";\n                pageClone.style.pageBreakAfter = \"always\";\n                pageClone.style.margin = \"0\";\n                pageClone.style.padding = \"0\";\n                pageClone.style.boxSizing = \"border-box\";\n                pageClone.style.overflow = \"hidden\";\n                // Apply the same adjustments to headers and content areas as the original\n                const header = pageClone.querySelector(\".pdf-header\");\n                if (header) {\n                    header.style.top = \"0.3in\";\n                }\n                const contentArea = pageClone.querySelector(\".content-container\");\n                if (contentArea) {\n                    contentArea.style.top = \"0.8in\";\n                    contentArea.style.bottom = \"0.6in\";\n                    contentArea.style.maxHeight = \"calc(11in - 1.4in)\";\n                }\n                // Add the page to our formatted document\n                formattedDocument.appendChild(pageClone);\n            }\n            // Serialize the HTML content with all the page-specific formatting preserved\n            const serializedHTML = createPrintableHTML(formattedDocument);\n            // Create form data for the API request\n            const formData = new FormData();\n            formData.append(\"html\", serializedHTML);\n            formData.append(\"filename\", filename);\n            formData.append(\"isMultiPage\", \"true\"); // Signal that this is multi-page content\n            // Send to server endpoint for PDF generation\n            const response = await fetch(\"/api/generate-pdf\", {\n                method: \"POST\",\n                body: formData\n            });\n            // Hide loading indicator\n            if (loadingToast && loadingToast.dismiss) {\n                loadingToast.dismiss();\n            }\n            if (!response.ok) {\n                throw new Error(\"PDF generation failed\");\n            }\n            // Get the PDF blob\n            const pdfBlob = await response.blob();\n            // Create a download link and trigger download\n            const downloadUrl = URL.createObjectURL(pdfBlob);\n            const downloadLink = document.createElement(\"a\");\n            downloadLink.href = downloadUrl;\n            downloadLink.download = filename;\n            document.body.appendChild(downloadLink);\n            downloadLink.click();\n            document.body.removeChild(downloadLink);\n            // Clean up object URL\n            URL.revokeObjectURL(downloadUrl);\n            // Show success message\n            showToast(\"PDF Generated\", \"Your document has been downloaded.\");\n            return true;\n        }\n        console.error(\"Failed to export PDF: element not found or not in browser\");\n        return false;\n    } catch (error) {\n        console.error(\"Error exporting PDF:\", error);\n        showToast(\"PDF Generation Failed\", \"There was an error creating your PDF.\", \"destructive\");\n        return false;\n    }\n};\n// Helper function to show toast notifications\nfunction showToast(title, description) {\n    let variant = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"default\";\n    // Simple implementation that works without dependencies\n    console.log(\"\".concat(title, \": \").concat(description));\n    // Try to use the application's toast system if available in global scope\n    try {\n        // Check for global toast API\n        const globalToast = window.__toast;\n        if (typeof (globalToast === null || globalToast === void 0 ? void 0 : globalToast.toast) === \"function\") {\n            return globalToast.toast({\n                title,\n                description,\n                variant\n            });\n        }\n    } catch (e) {\n        console.warn(\"Toast system not available\", e);\n    }\n    // Fallback implementation\n    return {\n        dismiss: ()=>console.log(\"Toast dismissed\")\n    };\n}\n// Helper function to create printable HTML with all styles preserved\nfunction createPrintableHTML(element) {\n    // Create a container for the printable content\n    const container = document.createElement(\"div\");\n    container.appendChild(element.cloneNode(true));\n    // Extract all stylesheets to include\n    let styles = \"\";\n    // Find and include all stylesheet links\n    const styleSheets = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    styleSheets.forEach((sheet)=>{\n        const href = sheet.href;\n        if (href) {\n            styles += '<link rel=\"stylesheet\" href=\"'.concat(href, '\">\\n');\n        }\n    });\n    // Find and include all style elements\n    const styleElements = document.querySelectorAll(\"style\");\n    styleElements.forEach((style)=>{\n        styles += style.outerHTML + \"\\n\";\n    });\n    // Create the final HTML document with print-specific CSS\n    const html = '\\n    <!DOCTYPE html>\\n    <html>\\n      <head>\\n        <meta charset=\"utf-8\">\\n        <title>'.concat(document.title || \"Document\", \"</title>\\n        \").concat(styles, '\\n        <style>\\n          @page {\\n            size: letter portrait;\\n            margin: 0;\\n          }\\n          body {\\n            margin: 0;\\n            padding: 0;\\n            background-color: white;\\n          }\\n          .page-container {\\n            width: 8.5in;\\n            height: 11in;\\n            page-break-after: always;\\n            position: relative;\\n            margin: 0;\\n            padding: 0;\\n            overflow: hidden;\\n            box-sizing: border-box;\\n            border: none;\\n          }\\n          /* Ensure headers are positioned correctly */\\n          .pdf-header {\\n            position: absolute;\\n            top: 0.3in;\\n            left: 0.5in;\\n            right: 0.5in;\\n          }\\n          /* Ensure content areas are properly sized */\\n          .content-container {\\n            position: absolute;\\n            top: 0.8in;\\n            left: 0.5in;\\n            right: 0.5in;\\n            bottom: 0.6in;\\n            overflow: hidden;\\n          }\\n          /* Reset any potentially problematic styles */\\n          * {\\n            text-shadow: none !important;\\n            box-shadow: none !important;\\n          }\\n          /* Hide any unwanted elements */\\n          .no-print, button, [role=\"button\"] {\\n            display: none !important;\\n          }\\n        </style>\\n      </head>\\n      <body>\\n        ').concat(container.innerHTML, \"\\n      </body>\\n    </html>\\n  \");\n    return html;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/pdf-utils.ts\n"));

/***/ })

});