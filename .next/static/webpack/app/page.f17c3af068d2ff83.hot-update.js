"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./services/ai/editor-enhancement-service.ts":
/*!***************************************************!*\
  !*** ./services/ai/editor-enhancement-service.ts ***!
  \***************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   editorEnhancementService: function() { return /* binding */ editorEnhancementService; }\n/* harmony export */ });\n/**\n * Service for AI text enhancements in the editor\n */ /**\n * Service for interacting with AI endpoints to enhance editor content\n */ const editorEnhancementService = {\n    /**\n   * Generates text with AI based on a prompt\n   * @param currentText Optional current text for context\n   * @param customPrompt Custom prompt instructions\n   * @returns Promise resolving to generated text\n   */ generateText: async function() {\n        let currentText = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\", customPrompt = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n        try {\n            const response = await fetch(\"/api/ai\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    systemPrompt: \"You are an expert text editor who helps improve document text based on specific instructions. \\n                        Your task is to enhance the given text according to the specific request provided. If a component is present in the image, identify the single component in focus and add text about it.\\n\\n                        # Instructions\\n\\n                        1. **If asked to describe a component**: Determine and specify the type of component shown in the image.\\n                        2. **If asked to assess Condition**: Evaluate the component's condition based on visual inspection. **Describe Condition**: Provide a detailed description of the component's current physical state and any visible defects or issues.\\n\\n                        # Output Format\\n\\n                        The response must be a single sentence unless requested otherwise. \\n\\n                        # Examples\\n\\n                        **Input**: Images of amenity area and exercise rooms with no very noticeable defects. \\n\\n                        **Output**: The finishes were all in good condition. \t\t\t\t \t\t\\n\t\t\t\t\t\t\\n                        **Input**: Multiple images of a corridor with some scuffs and peeling wallpaper. \\n\\n                        **Output**: The corridors were predominantly in good condition. A handful of floors had unpainted baseboards, minor scuffs on walls, and minor areas of peeling wallpaper. \\n\\n                        # Notes\\n\\n                        - Focus on visible attributes of the component to determine condition\\n                        - For components with severe issues, prioritize safety in the recommendation.\",\n                    userPrompt: \"\".concat(customPrompt || \"Write a detailed technical paragraph\", \".\\n                      \").concat(currentText ? 'The current text is: \"'.concat(currentText, '\"') : \"\", \"\\n                      The text should be factual, professional, and provide relevant observations.\")\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"API error: \".concat(response.status));\n            }\n            const data = await response.json();\n            return data.content;\n        } catch (error) {\n            console.error(\"Text generation error:\", error);\n            throw error;\n        }\n    },\n    /**\n   * Generates text with AI based on both a prompt and an image\n   * @param currentText Optional current text for context\n   * @param customPrompt Custom prompt instructions\n   * @param photoData The processed image data as a data URL\n   * @returns Promise resolving to generated text\n   */ generateTextWithImage: async function() {\n        let currentText = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\", customPrompt = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\", photoData = arguments.length > 2 ? arguments[2] : void 0;\n        try {\n            const response = await fetch(\"/api/ai\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    systemPrompt: \"You are a professional report writer for property inspection reports. \\n                        Use professional, technical language that is concise and factual.\\n                        Analyze the image in detail and incorporate your observations in your response.\",\n                    userPrompt: \"\".concat(customPrompt || \"Write a technical description\", \" \\n                      of the image I'm sharing with you.\\n                      \").concat(currentText ? 'The current text is: \"'.concat(currentText, '\"') : \"\", \"\\n                      The text should be factual, professional, and provide relevant observations about what's shown.\"),\n                    includePhoto: true,\n                    photoData: photoData\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"API error: \".concat(response.status));\n            }\n            const data = await response.json();\n            return data.content;\n        } catch (error) {\n            console.error(\"Image-based text generation error:\", error);\n            throw error;\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./services/ai/editor-enhancement-service.ts\n"));

/***/ })

});